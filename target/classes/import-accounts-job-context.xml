<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						   http://www.springframework.org/schema/batch 
						   http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
						   http://www.springframework.org/schema/task
    http://www.springframework.org/schema/task/spring-task-3.2.xsd
    http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	 http://www.springframework.org/schema/jdbc 
	 http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd">



	<context:component-scan base-package="com.blog.samples.batch" />




	<bean id="customWriter" class="com.mingfei.chen.springBatch.CustomWriter" />

<bean id="itemProcesser" class="com.mingfei.chen.springBatch.CustomItemProcessor" />


	<job id="importAccountData"  xmlns="http://www.springframework.org/schema/batch">
		<step id="parseAndLoadAccountData" >
			<tasklet>
			
				<chunk reader="reader" processor="itemProcesser" writer="customWriter" commit-interval="5"
					skip-limit="2">
					<skippable-exception-classes>
						<include
							class="org.springframework.batch.item.file.FlatFileParseException" />
					</skippable-exception-classes>
				</chunk>
			</tasklet>
		</step>
		
	
	</job>

	<bean id="reader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="resource" value="classpath:accounts.txt" />
		<property name="linesToSkip" value="1" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names"
							value="ACCOUNT_ID,ACCOUNT_HOLDER_NAME,ACCOUNT_CURRENCY,BALANCE" />
						<property name="delimiter" value="," />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="com.mingfei.chen.springBatch.AccountFieldSetMapper" />
				</property>
			</bean>
		</property>
	</bean>


	<bean id="runScheduler" class="com.mingfei.chen.springBatch.RunScheduler" />
<bean id="CalcEngineJobController" class="com.mingfei.chen.springBatch.CalcEngineJobController" />




	<bean id="writer" class="com.mingfei.chen.springBatch.AccountItemWriter">
		<constructor-arg ref="dataSource" />
	</bean>

	<jdbc:embedded-database id="dataSource" type="H2">
		<jdbc:script location="/create-account-table.sql" />
	</jdbc:embedded-database>

	<bean class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

       <bean id="jobRepository"
              class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
              <property name="dataSource" ref="dataSource" />
              <property name="transactionManager" ref="transactionManager" />
              <property name="databaseType" value="H2" />
       </bean>
 

	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	    <!-- Job exploring -->
        
        <bean id="registry"
                        class="org.springframework.remoting.rmi.RmiRegistryFactoryBean">
                <property name="port" value="1099"/>
        </bean>

        <bean id="serverConnector"
                        class="org.springframework.jmx.support.ConnectorServerFactoryBean">
                <property name="objectName" value="connector:name=rmi"/>
                <property name="serviceUrl" 
                                value="service:jmx:rmi://localhost/jndi/rmi://localhost:1099/myconnector"/>
                <property name="threaded" value="true"/>
        </bean>


 <bean class="org.springframework.jmx.export.MBeanExporter">
                <property name="beans">
                        <map>
                                <entry key="spring:service=batch,bean=jobOperator">
                                        <bean class="org.springframework.aop.framework.ProxyFactoryBean">
                                                <property name="target" ref="jobOperator" />
                                                <property name="interceptorNames" value="exceptionTranslator" />
                                        </bean>
                                </entry>
                             
                                <entry key="spring:service=batch,bean=jobLoader" value-ref="loader" />
                        </map>
                </property>
                <property name="assembler">
                        <bean class="org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler">
                                <property name="interfaceMappings">
                                        <map>
                                                <entry key="spring:service=batch,bean=jobOperator"
                                                        value="org.springframework.batch.core.launch.JobOperator" />
                                                <entry key="spring:service=batch,bean=jobLoader"
                                                        value="com.mingfei.chen.springBatch.JobLoader" />
                                        </map>
                                </property>
                        </bean>
                </property>
                <property name="notificationListenerMappings">
                        <map>
                                <entry key="*" value-ref="notificationListener"/>
                        </map>
                </property>
        </bean>
       


 <bean id="jobExplorer" class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean">
                                <property name="dataSource" ref="dataSource" />
                        </bean>
                        
        <bean id="notificationListener" class="com.mingfei.chen.springBatch.JobExecutionNotificationListener" />
<bean id="jobRegistryBeanPostProcessor"
class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor">
<property name="jobRegistry" ref="jobRegistry" />
</bean>
        <bean id="jobRegistry" class="org.springframework.batch.core.configuration.support.MapJobRegistry" />
        <bean id="jobOperator" class="org.springframework.batch.core.launch.support.SimpleJobOperator">
                <property name="jobExplorer" ref="jobExplorer"/>
                <property name="jobRepository" ref="jobRepository" />
                <property name="jobRegistry" ref="jobRegistry" />
                <property name="jobLauncher">
                        <bean parent="jobLauncher">
                                <property name="taskExecutor">
                                        <bean class="org.springframework.core.task.SimpleAsyncTaskExecutor" />
                                </property>
                        </bean>
                </property>
    
        </bean>

        <bean id="exceptionTranslator" class="org.springframework.batch.core.launch.support.RuntimeExceptionTranslator" />

        <bean id="loader" class="com.mingfei.chen.springBatch.DefaultJobLoader">
                <property name="registry" ref="jobRegistry" />
        </bean>

</beans>